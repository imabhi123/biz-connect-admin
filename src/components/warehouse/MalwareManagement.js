import React, { useState, useEffect } from "react";
import axios from "axios";
import {
  Box,
  Button,
  TextField,
  Typography,
  IconButton,
  useMediaQuery,
  Avatar,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Snackbar,
  Alert,
  MenuItem,
  Select,
  FormControl,
  InputLabel,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Divider,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  CircularProgress,
  Grid,
  Checkbox,
} from "@mui/material";
import {
  ExpandMore as ExpandMoreIcon,
  Business as BusinessIcon,
  Group as GroupIcon,
} from '@mui/icons-material';
import { useTheme } from "@mui/material/styles";
import ImageOutlinedIcon from "@mui/icons-material/ImageOutlined";
import AddIcon from "@mui/icons-material/Add";
import DeleteIcon from "@mui/icons-material/Delete";
import EditIcon from "@mui/icons-material/Edit";
import AccountCircleIcon from "@mui/icons-material/AccountCircle";
import WarningIcon from "@mui/icons-material/Warning";
import BlockIcon from "@mui/icons-material/Block";
import CheckCircleIcon from "@mui/icons-material/CheckCircle";
import PersonAddIcon from "@mui/icons-material/PersonAdd";
import PersonRemoveIcon from "@mui/icons-material/PersonRemove";
import VisibilityIcon from "@mui/icons-material/Visibility";
import { Country, State, City } from 'country-state-city';


const CommunityScreen = () => {
  const theme = useTheme();
  const isSmallScreen = useMediaQuery(theme.breakpoints.down("sm"));

  // State management
  const [members, setMembers] = useState([]);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isEditMode, setIsEditMode] = useState(false);
  const [currentEditId, setCurrentEditId] = useState(null);
  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);
  const [memberToDelete, setMemberToDelete] = useState(null);
  const [formCloseConfirmOpen, setFormCloseConfirmOpen] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [addMemberDialogOpen, setAddMemberDialogOpen] = useState(false);
  const [selectedMemberId, setSelectedMemberId] = useState("");
  const [availableMembers, setAvailableMembers] = useState([]);
  const [selectedCommunity, setSelectedCommunity] = useState(null);

  const [selectedCountry, setSelectedCountry] = useState('IN');
  const [selectedState, setSelectedState] = useState('Bihar');
  const [selectedDistrict, setSelectedDistrict] = useState('Patna');

  const [availableClubs, setAvailableClubs] = useState([]);
  const [availableChapters, setAvailableChapters] = useState([]);

  // Update formData initialization
  const initialFormData = {
    communityName: "",
    email: "",
    contact: "",
    designation: "member",
    description: "",
    image: null,
    creator: localStorage.getItem('userId'),
    clubs: [], // Initialize as empty array
    chapters: [], // Initialize as empty array
    country: selectedCountry,
    state: selectedState,
    city: selectedDistrict,
  };

  const [formData, setFormData] = useState(initialFormData);

  const [formErrors, setFormErrors] = useState({});
  const [filePreview, setFilePreview] = useState(null);

  const designationOptions = ["member", "incharge", "president", "vice-president", "Treasurer", "Secretary"];
  const [chapters, setChapters] = useState([]);
  const [clubs, setClubs] = useState([]);
  const [loading, setLoading] = useState(false);

  const fetchAssociations = async (selectedCommunity) => {
    console.log('abhishek', selectedCommunity)
    if (!selectedCommunity?.user?.chapters?.length && !selectedCommunity?.user?.clubs?.length) {
      return;
    }

    setLoading(true);
    try {
      // Fetch chapters
      const chapterPromises = (selectedCommunity.user.chapters || []).map(chapterId =>
        fetch(`https://biz-connect-livid.vercel.app/api/v1/chapters/${chapterId}`).then(res => res.json())
      );

      // Fetch clubs
      const clubPromises = (selectedCommunity.user.clubs || []).map(clubId =>
        fetch(`https://biz-connect-livid.vercel.app/api/v1/clubs/${clubId}`).then(res => res.json())
      );

      const [chapterResults, clubResults] = await Promise.all([
        Promise.all(chapterPromises),
        Promise.all(clubPromises)
      ]);

      setChapters(chapterResults);
      setClubs(clubResults);
    } catch (error) {
      console.error('Error fetching associations:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const fetchClubsAndChapters = async () => {
      try {
        const [clubsResponse, chaptersResponse] = await Promise.all([
          axios.get('https://biz-connect-livid.vercel.app/api/v1/clubs'),
          axios.get('https://biz-connect-livid.vercel.app/api/v1/chapters')
        ]);
        setAvailableClubs(clubsResponse.data || []);
        setAvailableChapters(chaptersResponse.data || []);
      } catch (err) {
        setError('Failed to fetch clubs and chapters');
      }
    };

    fetchClubsAndChapters();
  }, []);

  // Track form changes
  useEffect(() => {
    if (isDialogOpen) {
      setHasUnsavedChanges(true);
    }
  }, [formData]);

  useEffect(() => {
    fetchCommunities();
    fetchMembers();
  }, []);

  // Update resetForm function
  const resetForm = () => {
    setFormData(initialFormData);
    setFilePreview(null);
    setIsDialogOpen(false);
    setIsLoading(false);
    setIsEditMode(false);
    setCurrentEditId(null);
    setFormErrors({});
    setHasUnsavedChanges(false);
  };

  // Update handleInputChange
  const handleInputChangee = (e) => {
    const { name, value } = e.target;
    if (name === 'selectedClubs' || name === 'selectedChapters') {
      // Ensure value is always an array for multiple selects
      const arrayValue = Array.isArray(value) ? value : [];
      setFormData(prev => ({
        ...prev,
        [name === 'selectedClubs' ? 'clubs' : 'chapters']: arrayValue
      }));
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
    setFormErrors(prev => ({ ...prev, [name]: "" }));
    setHasUnsavedChanges(true);
  };

  const fetchMembers = async () => {
    setIsLoading(true);
    try {
      const response = await axios.get('https://biz-connect-livid.vercel.app/api/v1/admin/get-all-users');
      setAvailableMembers(response.data?.data || []);
      setIsLoading(false);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to fetch communities');
      setIsLoading(false);
    }
  };

  const handleCountryChange = (event) => {
    setSelectedCountry(event.target.value);
    setSelectedState('');
    setSelectedDistrict('');
  };

  const handleStateChange = (event) => {
    setSelectedState(event.target.value);
    setSelectedDistrict('');
  };

  const handleDistrictChange = (event) => {
    setSelectedDistrict(event.target.value);
  };

  const fetchCommunities = async () => {
    setIsLoading(true);
    try {
      const response = await axios.get('https://biz-connect-livid.vercel.app/api/v1/communities');
      setMembers(response.data?.communities || []);
      setIsLoading(false);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to fetch communities');
      setIsLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    setFormErrors((prev) => ({ ...prev, [name]: "" }));
    setHasUnsavedChanges(true);
  };

  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      const MAX_FILE_SIZE = 5 * 1024 * 1024;
      if (file.size > MAX_FILE_SIZE) {
        setError("File size should not exceed 5MB");
        return;
      }

      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onloadend = () => {
        setFormData((prev) => ({ ...prev, image: reader.result }));
        setFilePreview(URL.createObjectURL(file));
        setHasUnsavedChanges(true);
      };
      reader.onerror = (error) => {
        setError("Error reading file");
        console.error("File reading error", error);
      };
    }
  };

  const handleFormClose = () => {
    if (hasUnsavedChanges) {
      setFormCloseConfirmOpen(true);
    } else {
      resetForm();
    }
  };

  const handleViewCommunity = (community) => {
    console.log('abhishek')
    setSelectedCommunity(community);
    fetchAssociations(community)
    setIsViewDialogOpen(true);
  };

  const handleDeleteClick = (member) => {
    setMemberToDelete(member);
    setDeleteConfirmOpen(true);
  };

  const handleConfirmDelete = async () => {
    if (!memberToDelete) return;

    setIsDeleting(true);
    try {
      await axios.delete(`https://biz-connect-livid.vercel.app/api/v1/communities/${memberToDelete._id}`);
      setMembers((prevMembers) => prevMembers.filter((member) => member._id !== memberToDelete._id));
      setDeleteConfirmOpen(false);
      setMemberToDelete(null);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to delete community');
    } finally {
      setIsDeleting(false);
    }
  };

  // Update handleEditMember
  const handleEditMember = (member) => {
    setIsEditMode(true);
    setCurrentEditId(member._id);
    setFormData({
      communityName: member.communityName,
      email: member.email,
      contact: member.contact,
      designation: member.designation,
      description: member.description,
      image: member.image,
      creator: member.creator,
      clubs: Array.isArray(member.selectedClubs) ? member.selectedClubs : [],
      chapters: Array.isArray(member.selectedChapters) ? member.selectedChapters : [],
      state: selectedState,
      country: selectedCountry,
      city: selectedDistrict
    });
    setFilePreview(member.image);
    setIsDialogOpen(true);
    setHasUnsavedChanges(false);
  };

  const handleSubmit = async () => {
    const newErrors = {};
    const requiredFields = [
      'communityName', 'email', 'contact',
      'designation', 'description'
    ];

    requiredFields.forEach(field => {
      if (!formData[field]) {
        newErrors[field] = `${field.charAt(0).toUpperCase() + field.slice(1)} is required.`;
      }
    });

    if (Object.keys(newErrors).length > 0) {
      setFormErrors(newErrors);
      return;
    }

    try {
      setIsLoading(true);

      let response;
      if (isEditMode) {
        response = await axios.put(
          `https://biz-connect-livid.vercel.app/api/v1/communities/${currentEditId}`,
          formData
        );

        setMembers(prevMembers =>
          prevMembers.map(member =>
            member._id === currentEditId ? response.data : member
          )
        );
      } else {
        response = await axios.post('https://biz-connect-livid.vercel.app/api/v1/communities', formData);
        setMembers(prevMembers => [...prevMembers, response.data.community]);
      }

      setHasUnsavedChanges(false);
      resetForm();
    } catch (err) {
      if (err.response?.data?.errors) {
        const serverErrors = {};
        err.response.data.errors.forEach(error => {
          serverErrors[error.param] = error.msg;
        });
        setFormErrors(serverErrors);
      } else {
        setError(err.response?.data?.message || 'Failed to save community');
      }
      setIsLoading(false);
    }
  };



  const handleCloseError = () => {
    setError(null);
  };

  const handleAddMember = async () => {
    try {
      const response = await axios.post('https://biz-connect-livid.vercel.app/api/v1/communities/add-member', {
        communityId: selectedCommunity._id,
        userId: selectedMemberId
      });

      setMembers(prevMembers =>
        prevMembers.map(member =>
          member._id === selectedCommunity._id ? response.data.community : member
        )
      );

      setSelectedCommunity(response.data.community);
      setAddMemberDialogOpen(false);
      setIsViewDialogOpen(false)
      setSelectedMemberId("");
      fetchCommunities();
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to add member');
    }
  };

  const handleRemoveMember = async (memberId) => {
    try {
      const response = await axios.post('https://biz-connect-livid.vercel.app/api/v1/communities/remove-member', {
        communityId: selectedCommunity._id,
        userId: memberId
      });

      setMembers(prevMembers =>
        prevMembers.map(member =>
          member._id === selectedCommunity._id ? response.data.community : member
        )
      );

      setSelectedCommunity(response.data.community);
      setIsViewDialogOpen(false);
      fetchCommunities();
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to remove member');
    }
  };

  const handleToggleStatus = async (communityId) => {
    try {
      const response = await axios.post('https://biz-connect-livid.vercel.app/api/v1/communities/toggle-status', {
        communityId
      });

      setMembers(prevMembers =>
        prevMembers.map(member =>
          member._id === communityId ? response.data.community : member
        )
      );

      if (selectedCommunity?._id === communityId) {
        setSelectedCommunity(response.data.community);
      }
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to toggle status');
    }
  };

  return (
    <Box
      sx={{
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        minHeight: "calc(100vh - 100px)",
        backgroundColor: "white",
        padding: "16px",
        fontFamily: "'Poppins', sans-serif",
      }}
    >
      <Snackbar
        open={!!error}
        autoHideDuration={6000}
        onClose={handleCloseError}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
      >
        <Alert onClose={handleCloseError} severity="error" sx={{ width: '100%' }}>
          {error}
        </Alert>
      </Snackbar>

      {/* Delete Confirmation Dialog */}
      <Dialog
        open={deleteConfirmOpen}
        onClose={() => !isDeleting && setDeleteConfirmOpen(false)}
      >
        <DialogTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <WarningIcon sx={{ color: "warning.main" }} />
          Confirm Delete
        </DialogTitle>
        <DialogContent>
          Are you sure you want to delete {memberToDelete?.communityName}? This action cannot be undone.
        </DialogContent>
        <DialogActions>
          <Button
            onClick={() => setDeleteConfirmOpen(false)}
            disabled={isDeleting}
          >
            Cancel
          </Button>
          <Button
            onClick={handleConfirmDelete}
            color="error"
            variant="contained"
            disabled={isDeleting}
          >
            {isDeleting ? "Deleting..." : "Delete"}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Unsaved Changes Confirmation Dialog */}
      <Dialog
        open={formCloseConfirmOpen}
        onClose={() => setFormCloseConfirmOpen(false)}
      >
        <DialogTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <WarningIcon sx={{ color: "warning.main" }} />
          Unsaved Changes
        </DialogTitle>
        <DialogContent>
          You have unsaved changes. Are you sure you want to close this form?
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setFormCloseConfirmOpen(false)}>Cancel</Button>
          <Button
            onClick={() => {
              setFormCloseConfirmOpen(false);
              resetForm();
            }}
            color="error"
            variant="contained"
          >
            Discard Changes
          </Button>
        </DialogActions>
      </Dialog>

      {/* View Community Dialog */}
      <Dialog
        open={isViewDialogOpen}
        onClose={() => setIsViewDialogOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <Typography variant="h6">Community Details</Typography>
            <Chip
              label={selectedCommunity?.status}
              color={selectedCommunity?.status === 'blocked' ? 'error' : 'success'}
              onClick={() => handleToggleStatus(selectedCommunity?._id)}
              icon={selectedCommunity?.status === 'blocked' ? <BlockIcon /> : <CheckCircleIcon />}
            />
          </Box>
        </DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>
            <Avatar
              src={selectedCommunity?.image}
              sx={{ width: 100, height: 100 }}
            >
              {!selectedCommunity?.image && <AccountCircleIcon sx={{ width: 60, height: 60 }} />}
            </Avatar>
            <Box>
              <Typography variant="h6">{selectedCommunity?.communityName}</Typography>
              <Typography color="textSecondary">{selectedCommunity?.email}</Typography>
              <Typography color="textSecondary">Contact: {selectedCommunity?.contact}</Typography>
              <Typography color="textSecondary">ID: {selectedCommunity?.AssignId}</Typography>
              <Typography sx={{ textTransform: 'capitalize' }} color="primary">
                {selectedCommunity?.designation}
              </Typography>
            </Box>
          </Box>

          <Typography variant="h6" sx={{ mb: 2 }}>Description</Typography>
          <Typography paragraph sx={{ mb: 3 }}>{selectedCommunity?.description}</Typography>

          <List>
            {/* Chapters Section */}
            {chapters.length > 0 && (
              <Accordion defaultExpanded>
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center' }}>
                    <BusinessIcon sx={{ mr: 1 }} /> Chapters
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <List>
                    {chapters.map((chapter, index) => (
                      <React.Fragment key={chapter._id}>
                        <ListItem

                        >
                          <ListItemAvatar>
                            <Avatar src={chapter.image}>
                              <BusinessIcon />
                            </Avatar>
                          </ListItemAvatar>
                          <ListItemText
                            primary={chapter.chapterName}
                            secondary={`${chapter.city}, ${chapter.state}, ${chapter.country}`}
                          />
                        </ListItem>
                        {index < chapters.length - 1 && <Divider />}
                      </React.Fragment>
                    ))}
                  </List>
                </AccordionDetails>
              </Accordion>
            )}

            {/* Clubs Section */}
            {clubs.length > 0 && (
              <Accordion defaultExpanded>
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center' }}>
                    <GroupIcon sx={{ mr: 1 }} /> Clubs
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <List>
                    {clubs.map((club, index) => (
                      <React.Fragment key={club._id}>
                        <ListItem

                        >
                          <ListItemAvatar>
                            <Avatar src={club.image}>
                              <GroupIcon />
                            </Avatar>
                          </ListItemAvatar>
                          <ListItemText
                            primary={club.clubName}
                            secondary={`${club.city}, ${club.state}, ${club.country}`}
                          />
                        </ListItem>
                        {index < clubs.length - 1 && <Divider />}
                      </React.Fragment>
                    ))}
                  </List>
                </AccordionDetails>
              </Accordion>
            )}
          </List>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsViewDialogOpen(false)}>Close</Button>
        </DialogActions>
      </Dialog>

      {/* Add Member Dialog */}
      <Dialog
        open={addMemberDialogOpen}
        onClose={() => setAddMemberDialogOpen(false)}
      >
        <DialogTitle>Add Member to Community</DialogTitle>
        <DialogContent>
          <FormControl fullWidth sx={{ mt: 2 }}>
            <InputLabel>Select Member</InputLabel>
            <Select
              value={selectedMemberId}
              onChange={(e) => setSelectedMemberId(e.target.value)}
              label="Select Member"
            >
              {availableMembers.map((member) => (
                <MenuItem key={member._id} value={member._id}>
                  {member.fullName}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setAddMemberDialogOpen(false)}>Cancel</Button>
          <Button
            onClick={handleAddMember}
            variant="contained"
            color="primary"
          >
            Add Member
          </Button>
        </DialogActions>
      </Dialog>

      {/* Title and Create Button */}
      <Box
        sx={{
          width: "100%",
          maxWidth: '100%',
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          marginBottom: "16px"
        }}
      >
        <Typography
          variant={isSmallScreen ? "h5" : "h4"}
          sx={{
            color: "#E53935",
            fontWeight: "bold",
          }}
        >
          Community Members
        </Typography>
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          sx={{
            backgroundColor: "#E53935",
            "&:hover": { backgroundColor: "#B71C1C" },
          }}
          onClick={() => {
            resetForm();
            setIsDialogOpen(true);
          }}
        >
          Create Member
        </Button>
      </Box>

      {/* Members Table */}
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Name</TableCell>
              <TableCell>Email</TableCell>
              <TableCell>Designation</TableCell>
              <TableCell>Status</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {members?.map((member) => (
              <TableRow key={member._id}>
                <TableCell>{member.communityName}</TableCell>
                <TableCell>{member.email}</TableCell>
                <TableCell>{member.designation}</TableCell>
                <TableCell>
                  <Chip
                    label={member.status}
                    color={member.status === 'blocked' ? 'error' : 'success'}
                    onClick={() => handleToggleStatus(member._id)}
                    icon={member.status === 'blocked' ? <BlockIcon /> : <CheckCircleIcon />}
                  />
                </TableCell>
                <TableCell>
                  <IconButton
                    onClick={() => handleViewCommunity(member)}
                    sx={{ color: "#4CAF50" }}
                  >
                    <VisibilityIcon />
                  </IconButton>
                  <IconButton
                    onClick={() => handleEditMember(member)}
                    sx={{ color: "#1976d2" }}
                  >
                    <EditIcon />
                  </IconButton>
                  <IconButton
                    onClick={() => handleDeleteClick(member)}
                    sx={{ color: "#E53935" }}
                  >
                    <DeleteIcon />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      {/* Create/Edit Member Dialog */}
      <Dialog
        open={isDialogOpen}
        onClose={handleFormClose}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
            <AccountCircleIcon sx={{ color: "#E53935", marginRight: "8px" }} />
            {isEditMode ? "Edit Community Member" : "Create Community Member"}
          </Box>
        </DialogTitle>
        <DialogContent>
          {/* File Upload Section with Avatar */}
          <Box
            sx={{
              width: "100%",
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              marginBottom: "16px",
              position: "relative",
              marginTop: "16px"
            }}
          >
            <input
              type="file"
              accept="image/*"
              onChange={handleFileUpload}
              style={{
                display: "none",
              }}
              id="avatar-upload-input"
            />
            <label htmlFor="avatar-upload-input">
              <Avatar
                src={formData.image || filePreview}
                sx={{
                  width: 120,
                  height: 120,
                  cursor: "pointer",
                  border: "3px solid #E53935",
                  '&:hover': {
                    opacity: 0.7,
                  }
                }}
              >
                {!formData.image && !filePreview && <ImageOutlinedIcon sx={{ fontSize: 48, color: "#ccc" }} />}
              </Avatar>
            </label>

            {(formData.image || filePreview) && (
              <IconButton
                onClick={() => {
                  setFormData((prev) => ({ ...prev, image: null }));
                  setFilePreview(null);
                  const fileInput = document.getElementById('avatar-upload-input');
                  if (fileInput) fileInput.value = '';
                }}
                sx={{
                  position: "absolute",
                  top: 0,
                  right: 0,
                }}
              >
                <DeleteIcon sx={{ color: "#E53935" }} />
              </IconButton>
            )}
            <Typography variant="body2" sx={{ marginTop: "8px", color: "#666" }}>
              Click avatar to upload image
            </Typography>
          </Box>

          {/* Form Fields */}
          <Box
            sx={{
              display: "grid",
              gridTemplateColumns: "1fr 1fr",
              gap: "20px",
              width: "100%",
            }}
          >
            {[
              { label: "Name", name: "communityName" },
              { label: "Email", name: "email" },
              { label: "Contact", name: "contact" },
            ].map((field, index) => (
              <TextField
                key={index}
                fullWidth
                label={field.label}
                name={field.name}
                variant="outlined"
                value={formData[field.name]}
                onChange={handleInputChange}
                error={!!formErrors[field.name]}
                helperText={formErrors[field.name]}
              />
            ))}

            {/* Designation Dropdown */}
            <FormControl
              fullWidth
              variant="outlined"
              error={!!formErrors.designation}
            >
              <InputLabel>Designation</InputLabel>
              <Select
                name="designation"
                value={formData.designation}
                onChange={handleInputChange}
                label="Designation"
              >
                {designationOptions.map((option) => (
                  <MenuItem key={option} value={option}>
                    {option.charAt(0).toUpperCase() + option.slice(1)}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            {/* Country Dropdown */}
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth margin="normal">
                <InputLabel id="country-select-label">Country</InputLabel>
                <Select
                  labelId="country-select-label"
                  id="country-select"
                  value={'IN'}
                  disabled
                  onChange={handleCountryChange}
                  label="Country"
                >
                  <MenuItem value=""><em>None</em></MenuItem>
                  {Country.getAllCountries().map((country) => (
                    <MenuItem key={country.isoCode} value={country.isoCode}>
                      {country.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>

            {/* State Dropdown */}
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth margin="normal">
                <InputLabel id="state-select-label">State</InputLabel>
                <Select
                  labelId="state-select-label"
                  id="state-select"
                  value={selectedState}
                  onChange={handleStateChange}
                  label="State"
                  disabled={!selectedCountry}
                >
                  <MenuItem value=""><em>None</em></MenuItem>
                  {selectedCountry &&
                    State.getStatesOfCountry(selectedCountry).map((state) => (
                      <MenuItem key={state.isoCode} value={state.isoCode}>
                        {state.name}
                      </MenuItem>
                    ))}
                </Select>
              </FormControl>
            </Grid>

            {/* District Dropdown */}
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth margin="normal">
                <InputLabel id="district-select-label">Cities</InputLabel>
                <Select
                  labelId="district-select-label"
                  id="district-select"
                  value={selectedDistrict}
                  onChange={handleDistrictChange}
                  label="Cities"
                  disabled={!selectedState}
                >
                  <MenuItem value=""><em>None</em></MenuItem>
                  {selectedState &&
                    City.getCitiesOfState(selectedCountry, selectedState).map((city) => (
                      <MenuItem key={city.name} value={city.name}>
                        {city.name}
                      </MenuItem>
                    ))}
                </Select>
              </FormControl>
            </Grid>
            {/* Update the Select components */}
            <Grid item xs={12} sm={6}>
              <FormControl
                fullWidth
                sx={{ gridColumn: "span 2", mt: 2 }}
                error={!!formErrors.selectedClubs}
              >
                <InputLabel>Select Clubs</InputLabel>
                <Select
                  multiple
                  name="selectedClubs"
                  value={formData.clubs || []} // Ensure value is always an array
                  onChange={handleInputChangee}
                  label="Select Clubs"
                  renderValue={(selected) => (
                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                      {selected.map((value) => {
                        const club = availableClubs.find(c => c._id === value);
                        return (
                          <Chip
                            key={value}
                            label={club?.clubName || value}
                            size="small"
                          />
                        );
                      })}
                    </Box>
                  )}
                >
                  {availableClubs.map((club) => (
                    <MenuItem key={club._id} value={club._id}>
                      <Checkbox checked={(formData.clubs || []).indexOf(club._id) > -1} />
                      <ListItemText
                        primary={club.clubName}
                        secondary={`${club.city}, ${club.state}, ${club.country}`}
                      />
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6}>
              <FormControl
                fullWidth
                sx={{ gridColumn: "span 2", mt: 2 }}
                error={!!formErrors.selectedChapters}
              >
                <InputLabel>Select Chapters</InputLabel>
                <Select
                  multiple
                  name="selectedChapters"
                  value={formData.chapters || []} // Ensure value is always an array
                  onChange={handleInputChangee}
                  label="Select Chapters"
                  renderValue={(selected) => (
                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                      {selected.map((value) => {
                        const chapter = availableChapters.find(c => c._id === value);
                        return (
                          <Chip
                            key={value}
                            label={chapter?.chapterName || value}
                            size="small"
                          />
                        );
                      })}
                    </Box>
                  )}
                >
                  {availableChapters.map((chapter) => (
                    <MenuItem key={chapter._id} value={chapter._id}>
                      <Checkbox checked={(formData.chapters || []).indexOf(chapter._id) > -1} />
                      <ListItemText
                        primary={chapter.chapterName}
                        secondary={`${chapter.city}, ${chapter.state}, ${chapter.country}`}
                      />
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            {/* Description Field */}
            <TextField
              fullWidth
              multiline
              rows={4}
              label="Description about the member"
              name="description"
              variant="outlined"
              value={formData.description}
              onChange={handleInputChange}
              error={!!formErrors.description}
              helperText={formErrors.description}
              sx={{ gridColumn: "span 2" }}
            />
          </Box>

          {/* Save Button */}
          <Button
            fullWidth
            variant="contained"
            disabled={isLoading}
            sx={{
              backgroundColor: "#E53935",
              color: "#fff",
              marginTop: "16px",
              "&:hover": { backgroundColor: "#B71C1C" },
            }}
            onClick={handleSubmit}
          >
            {isLoading
              ? (isEditMode ? "Updating..." : "Saving...")
              : (isEditMode ? "Update Member" : "Save Member")
            }
          </Button>
        </DialogContent>
      </Dialog>
    </Box>
  );
};

export default CommunityScreen;